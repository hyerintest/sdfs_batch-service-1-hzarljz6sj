plugins {
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'java'
    id 'com.google.cloud.tools.jib' version '3.3.1'  // Docker 이미지 빌드용
}

group = 'com.tlc.test'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

ext {
    finalName = 'batch-service-1-hzarljz6sj'
    springProfile = ''
    dockerRegistry = project.hasProperty('dockerRegistry') ? project.getProperty('dockerRegistry') : 'default'
    dockerUser = project.hasProperty('dockerUser') ? project.getProperty('dockerUser') : 'default'
    dockerPassword = project.hasProperty('dockerPassword') ? project.getProperty('dockerPassword') : 'default'
    commitRev = project.hasProperty('commitRev') ? project.getProperty('commitRev') : 'latest'
    serviceName = project.hasProperty('serviceName') ? project.getProperty('serviceName') : 'default'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    implementation 'org.springframework.data:spring-data-commons'
    implementation('org.springframework.boot:spring-boot-starter') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.batch:spring-batch-test'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Utility
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation('com.googlecode.log4jdbc:log4jdbc:1.2') {
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }
    implementation 'org.slf4j:slf4j-api:1.7.30' // SLF4J API
    implementation 'ch.qos.logback:logback-classic:1.2.3' // Logback implementation
}


jib {
    from {
        image = "registry.turacocloud.com/turaco-package/openjdk:8-alpine"
    }
    to {
        image = "${dockerRegistry}"
        if ("${dockerUser}" == ('default')) {
            credHelper = 'ecr-login'
        } else {
            auth {
                username = "${dockerUser}"
                password = "${dockerPassword}"
            }
        }
        tags = ["${serviceName}-${commitRev}", "${serviceName}-latest"]
    }
    extraDirectories {
        paths = 'logs'
    }

    container {
        volumes = ['/tmp', '/logs']
    }
}
